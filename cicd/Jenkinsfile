pipeline {
    agent any
    options { timestamps () }
    environment {
		REGISTRY_URL = 'cprd-doc-reg01.sberins.ru:10010'
		SERVICE_NAME = 'intg-rabbitmq'
    }
    parameters {
      	gitParameter(branch: '', branchFilter: 'origin/release.*', description: 'Ветка сборки', listSize: '1', name: 'branch', quickFilterEnabled: false, selectedValue: 'DEFAULT', sortMode: 'NONE', tagFilter: '*', type: 'PT_BRANCH')
        gitParameter tagFilter: 'v[0-9]*', listSize: '1', defaultValue: 'v1.0.0', name: 'Tag', type: 'PT_TAG', sortMode: 'DESCENDING_SMART', description: 'Версия для установки на прод'
		booleanParam(name: 'prod_update', defaultValue: false, description: 'Обновить прод стенд')
    }
    stages {
		stage('Environment'){
			steps {
				script {

                    env.BRANCH_NAME = params.branch
					echo "Running ${env.BUILD_ID} on ${env.BRANCH_NAME}"

					if(BRANCH_NAME.contains("release") && !params.prod_update){
						sh '''#!/bin/bash
						tag_version=\$(git tag --list 'v[0-9]*' | sort --version-sort | tail -1)
						echo "TAG_VERSION: \$tag_version"
						release_version=$(echo $BRANCH_NAME | awk -F "/" '{print $3}')
						echo "RELEASE_VERSION: \$release_version"

						if [ -z \$tag_version ]
						then
							echo "v1.0.0-$release_version">Version
							exit 0
						fi

						major="\$(echo \$version|cut -d '.' -f1)"
						middle="\$(echo \$version|cut -d '.' -f2)"
						minor="\$(echo \$version|cut -d '.' -f3)"
						middle=\$((middle+1))
						minor=0

						echo "v$major.$middle.$minor-$release_version">Version
						'''

						version = readFile 'Version'
					}

					if (BRANCH_NAME.contains("release") && params.prod_update ){
				    	version = params.Tag
					}

					env.VERSION = version.trim()
					echo "VERSION: '${env.VERSION}'"
              		echo "SERVICE_NAME: '${env.SERVICE_NAME}'"
				}
			}
        }

		stage('Run preprod build'){
			when { expression { BRANCH_NAME.contains("release") && !params.prod_update } }
			steps {
				sh "rm -rf ~/workspace/$JOB_NAME/preprod.update ~/workspace/$JOB_NAME/prod.update"
			}
        }

        stage('Push version bitbucket'){
            when { expression { BRANCH_NAME.contains("release") && !params.prod_update } }
			steps {
				script {
                    sshagent(['bitbucket_elma_ssh']) {
						sh "git tag ${env.VERSION}"
                        sh "git push --tags --no-verify"
                    }
				}
		    }
        }

      	stage('Build') {
            when { expression { !params.prod_update } }
            steps {
				dir('.') {
				    withCredentials([usernamePassword(credentialsId: "doc-reg-elma", passwordVariable: 'nexus_password', usernameVariable: 'nexus_username')]) {
                        configFileProvider([configFile(fileId: 'elma-mvn', targetLocation: 'settings.xml')]) {
                            sh "docker login -u=\"${nexus_username}\" -p=\"${nexus_password}\" https://${env.REGISTRY_URL}/"
							sh "docker build -f cicd/Dockerfile -t ${env.REGISTRY_URL}/${env.SERVICE_NAME}:${env.VERSION} ."
							sh "echo 'Push to registry'"
							sh "docker push ${env.REGISTRY_URL}/${env.SERVICE_NAME}:${env.VERSION}"
                        }
					}
				}
            }
        }

        stage("Deploy") {
            parallel {
				stage("PREPROD") {
					when { expression { BRANCH_NAME.contains("release") && !params.prod_update } }
                    steps {
                        dir ('.') {
                	        withCredentials([
                    	        file(credentialsId: 'kubeconfig-preprod-elma', variable: 'kubeconfig'),
                                file(credentialsId: 'helm-rmq-values-preprod', variable: 'helm_values')]){
                    	            sh label: '', script: """#!/bin/bash
                    	                echo 'update PREPROD'
                        	            export KUBECONFIG=${kubeconfig}
                        	            helm upgrade --install ${env.SERVICE_NAME} .ci/helm --namespace elma365 --debug --wait --timeout 300s -f ./.ci/helm/values-prep.yaml --set image.name="${env.REGISTRY_URL}/${env.SERVICE_NAME}" --set image.tag=${env.VERSION} --set env.secret.ENV=preprod
                    	                touch ~/workspace/$JOB_NAME/preprod.update
                    	            """
                    	    }
            	        }
                    }
                }
				stage("PROD") {
					when { expression { BRANCH_NAME.contains("release") && params.prod_update } }
                    steps {
                        dir ('.') {
                	        withCredentials([
                    	        kubeconfigFile(credentialsId: 'kube_config_prod', variable: 'kubeconfig'),
                                file(credentialsId: 'helm-rmq-values-preprod', variable: 'helm_values')]){
                    	            sh label: '', script: """#!/bin/bash
                    	                echo 'update PROD'
                        	            export KUBECONFIG=${kubeconfig}
                        	            if [[ -f ~/workspace/$JOB_NAME/preprod.update || -f ~/workspace/$JOB_NAME/prod.update ]]; then
                        	                helm upgrade --install ${env.SERVICE_NAME} .ci/helm --namespace elma365 --debug --wait --timeout 300s -f ./.ci/helm/values-prod.yaml --set image.name="${env.REGISTRY_URL}/${env.SERVICE_NAME}" --set image.tag=${env.VERSION} --set env.secret.ENV=prod
                                        else
				                		    echo "Nothing TO DO. Please update preprod/prod before"
			                		    fi
                                        touch ~/workspace/$JOB_NAME/prod.update
                    	            """

            	            }
                        }
                    }
                }
			}
        }
    }

    post {
        failure {
		    script {
        	    if (BRANCH_NAME.contains("release") && !params.prod_update) {
            	    sshagent(['bitbucket_elma_ssh']) {
					    sh "git tag -d ${env.VERSION}"
					    sh "git push --delete origin ${env.VERSION}"
                    }
                }
            }
            cleanWs(cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true,
                patterns: [[pattern: '.update', type: 'EXCLUDE']]
            )
            emailext mimeType: 'text/html',
        	body: "Результат выполнения сборки №${env.BUILD_NUMBER} ${env.BUILD_URL}console",
          	recipientProviders: [culprits(), developers(), requestor()],
          	replyTo: 'no-reply@sberins.ru', subject: "Error: ${env.JOB_NAME}"
        }
        success {
            script {
                emailext mimeType: 'text/html',
                body: "Результат выполнения сборки №${env.BUILD_NUMBER} ${env.BUILD_URL}console",
                recipientProviders: [culprits(), developers(), requestor()],
                replyTo: 'no-reply@sberins.ru', subject: "Success: ${env.JOB_NAME}"
            }
            cleanWs(cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true,
                patterns: [[pattern: '.update', type: 'EXCLUDE']]
            )
        }
    }
}
